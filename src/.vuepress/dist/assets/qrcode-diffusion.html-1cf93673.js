import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as l,c,f as o,b as n,d as s,e,a as t}from"./app-36a2e4bd.js";const r={},u=t(`<h1 id="hugging-face-ai-生成炫酷二维码" tabindex="-1"><a class="header-anchor" href="#hugging-face-ai-生成炫酷二维码" aria-hidden="true">#</a> Hugging Face AI 生成炫酷二维码</h1><p><a href="https://bohrium.dp.tech/notebook/138792d0773a4fa0bc85134f2ac8a383" target="_blank"><img src="https://cdn.dp.tech/bohrium/web/static/images/open-in-bohrium.svg" alt="Open In Bohrium"></a></p><p>Stable Diffusion 是发布于 2022 年的开源深度学习文字转图片扩散模型。ControlNet 是一种控制扩散模型的网络结构。将 Stable Diffusion 和 ControlNet相结合，即可以在 Stable Diffusion 所用的提示词之外，额外地给模型添加限制条件，以控制生成结果的特征。</p><p>利用这种方法，今年6月，nhciao 在 reddit 上发表了生成艺术化二维码的文章。后经社区的探索和迭代，衍生出二维码专用的 ControlNet 模型，以及基于这个模型生成艺术化二维码的方法。如果参数调整得当的话，生成的结果可以达到“看上去不像是二维码”，却能够成功被正确识别的效果。</p><p>接下来，本文将一步步引导您快速掌握运用 Hugging Face 生成一张艺术化的二维码的方法。</p><h2 id="第一步-加载-controlnet-模型" tabindex="-1"><a class="header-anchor" href="#第一步-加载-controlnet-模型" aria-hidden="true">#</a> 第一步：加载 ControlNet 模型</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 安装所需的依赖</span>
<span class="token comment"># !conda install &quot;python=3.10&quot; -y</span>
!pip config <span class="token builtin">set</span> <span class="token keyword">global</span><span class="token punctuation">.</span>index<span class="token operator">-</span>url https<span class="token punctuation">:</span><span class="token operator">//</span>pypi<span class="token punctuation">.</span>tuna<span class="token punctuation">.</span>tsinghua<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn<span class="token operator">/</span>simple
!pip install <span class="token string">&quot;diffusers==0.18.2&quot;</span> qrcode accelerate safetensors transformers <span class="token operator">-</span><span class="token operator">-</span>upgrade
!pip install <span class="token string">&quot;ipywidgets&lt;8&quot;</span> <span class="token operator">-</span><span class="token operator">-</span>upgrade
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面这个代码块加载了示例所使用的模型，运行大约需要5分钟，请您耐心等待。如果你使用的是<strong>qrcode-diffusion: 2023-7-17</strong>镜像的话，那么模型已经下载好，这个代码块将会被自动跳过。如果你需要用到其他模型的话，直接在后续的代码中修改即可，diffusers会自动下载。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>%%bash
<span class="token comment"># 加载示例所使用的模型</span>
<span class="token keyword">if</span> <span class="token operator">!</span> <span class="token punctuation">[</span> <span class="token parameter variable">-e</span> /opt/hub <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;正在下载...&quot;</span>
    <span class="token function">wget</span> <span class="token parameter variable">-q</span> https://bohrium-example.oss-cn-zhangjiakou.aliyuncs.com/notebook/hub.tar.gz <span class="token parameter variable">-O</span> /tmp/hub.tar.gz
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;下载完成，开始解压&quot;</span>
    <span class="token function">tar</span> xzvf /tmp/hub.tar.gz <span class="token parameter variable">-C</span> /opt <span class="token operator">&gt;</span> /dev/null
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;解压完成&quot;</span>
    <span class="token function">rm</span> /tmp/hub.tar.gz
<span class="token keyword">fi</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;模型已加载&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>模型已加载
</code></pre><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os

<span class="token keyword">import</span> qrcode
<span class="token keyword">import</span> torch
<span class="token keyword">from</span> diffusers <span class="token keyword">import</span> ControlNetModel<span class="token punctuation">,</span> StableDiffusionControlNetPipeline
<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image <span class="token keyword">as</span> PilImage
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>加载 ControlNet 模型。如果没有运行前面的代码块加载模型的话，需要下载数据并加载，需要花费约5分钟，请耐心等待。</p><p>control_v1p_sd15_brightness 用于明暗控制，它可以对灰度图片进行着色或者对生成的图片着色。使用这个模型可以让所生成的图片的明暗与原二维码匹配，使得结果更可能能够被识别。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>controlnet_brightness <span class="token operator">=</span> ControlNetModel<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>
    <span class="token string">&quot;ioclab/control_v1p_sd15_brightness&quot;</span><span class="token punctuation">,</span>
    torch_dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float16<span class="token punctuation">,</span>
    use_safetensors<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
    cache_dir<span class="token operator">=</span><span class="token string">&quot;/opt/hub&quot;</span>
<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span><span class="token string">&quot;cuda&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>The config attributes {&#39;dropout&#39;: 0.0, &#39;sample_size&#39;: 32} were passed to ControlNetModel, but are not expected and will be ignored. Please verify your config.json configuration file.
</code></pre><p>control_v1p_sd15_qrcode_monster 是专门为生成二维码训练的模型，使用它可以使得生成的图像包含二维码信息，又富有艺术性。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>controlnet_qrcode <span class="token operator">=</span> ControlNetModel<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>
    <span class="token string">&quot;monster-labs/control_v1p_sd15_qrcode_monster&quot;</span><span class="token punctuation">,</span>
    torch_dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float16<span class="token punctuation">,</span>
    use_safetensors<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
    cache_dir<span class="token operator">=</span><span class="token string">&quot;/opt/hub&quot;</span>
<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span><span class="token string">&quot;cuda&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第二步-加载-stable-diffusion-模型" tabindex="-1"><a class="header-anchor" href="#第二步-加载-stable-diffusion-模型" aria-hidden="true">#</a> 第二步：加载 Stable Diffusion 模型</h2><p>在这一步中，将会下载并加载 Stable Diffusion 模型并创建数据管道。如果没有运行前面的代码块加载模型的话，这个过程大约需要10分钟，请耐心等待。</p><p>根据 Stable Diffusion 网络结构，使用不同的数据集进行训练，产生了多种不同效果的模型。其中 <em>stable-diffusion-v1-5</em> 具有写实的风格，而 <em>anything-v5</em>、<em>DreamShaper</em>、<em>ghostmix</em> 等具有动漫化的风格。根据不同需求，可以选择使用不同的模型。</p><p><code>StableDiffusionControlNetPipline</code>数据管道可以方便地将 Stable Diffusion 模型和多个 ControlNet 模型结合。我们可以将提示词等参数传入这个数据管道，即可自动完成推理步骤，得到结果。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pipe <span class="token operator">=</span> StableDiffusionControlNetPipeline<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>
    <span class="token comment"># 此处选择不同的模型</span>
    <span class="token comment"># &quot;runwayml/stable-diffusion-v1-5&quot;,</span>
    <span class="token comment"># &quot;stablediffusionapi/anything-v5&quot;,</span>
    <span class="token comment"># &quot;Lykon/DreamShaper&quot;,</span>
    <span class="token string">&quot;stablediffusionapi/ghostmix&quot;</span><span class="token punctuation">,</span>
    controlnet<span class="token operator">=</span><span class="token punctuation">[</span>controlnet_qrcode<span class="token punctuation">,</span> controlnet_brightness<span class="token punctuation">]</span><span class="token punctuation">,</span>
    torch_dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float16<span class="token punctuation">,</span>
    cache_dir<span class="token operator">=</span><span class="token string">&quot;/opt/hub&quot;</span>
<span class="token punctuation">)</span>
pipe <span class="token operator">=</span> pipe<span class="token punctuation">.</span>to<span class="token punctuation">(</span><span class="token string">&quot;cuda&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>vae/diffusion_pytorch_model.safetensors not found
/opt/conda/lib/python3.10/site-packages/transformers/models/clip/feature_extraction_clip.py:28: FutureWarning: The class CLIPFeatureExtractor is deprecated and will be removed in version 5 of Transformers. Please use CLIPImageProcessor instead.
  warnings.warn(
</code></pre><p>在推理过程中，Scheduler 定义了通过模型输出更新样本的方式，也称为 Sampler。选用不同的 Schedulers 能够获得不同的收敛速度和生成效果。这里选择的是 <code>DPMSolverMultistepScheduler</code>并将其<code>use_karras_sigmas</code>配置为<code>True</code>。在这个配置下此 Scheduler 也称为 <em>DPM++ 2M Karras</em>，其具有较好的效果。你也可以根据需要选择不同的 Scheduler。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> diffusers <span class="token keyword">import</span> DPMSolverMultistepScheduler

scheduler <span class="token operator">=</span> DPMSolverMultistepScheduler<span class="token punctuation">.</span>from_config<span class="token punctuation">(</span>
    pipe<span class="token punctuation">.</span>scheduler<span class="token punctuation">.</span>config<span class="token punctuation">,</span> use_karras_sigmas<span class="token operator">=</span><span class="token boolean">True</span>
<span class="token punctuation">)</span>
pipe<span class="token punctuation">.</span>scheduler <span class="token operator">=</span> scheduler 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第三步-生成原始二维码" tabindex="-1"><a class="header-anchor" href="#第三步-生成原始二维码" aria-hidden="true">#</a> 第三步：生成原始二维码</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 更改此处来修改二维码的内容，较短的内容往往能获得更好的效果</span>
qrcode_data <span class="token operator">=</span> <span class="token string">&quot;https://nb.bohrium.dp.tech/detail/1345&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>qr <span class="token operator">=</span> qrcode<span class="token punctuation">.</span>QRCode<span class="token punctuation">(</span>
    <span class="token comment"># 容错率，ERROR_CORRETC_L代表二维码有较低的容错率，使得二维码复杂度降低，生成艺术化二维码的难度更小</span>
    <span class="token comment"># 如果内容较短的话，可以设置为ERROR_CORRETC_H，代表较高容错率，这样可以采用更激进的调参方式</span>
    error_correction<span class="token operator">=</span>qrcode<span class="token punctuation">.</span>constants<span class="token punctuation">.</span>ERROR_CORRECT_L<span class="token punctuation">,</span>  
    box_size<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">,</span>
    border<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
qr<span class="token punctuation">.</span>add_data<span class="token punctuation">(</span>qrcode_data<span class="token punctuation">)</span>
qr<span class="token punctuation">.</span>make<span class="token punctuation">(</span>fit<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
qrcode_image <span class="token operator">=</span> qr<span class="token punctuation">.</span>make_image<span class="token punctuation">(</span>
    fill_color<span class="token operator">=</span><span class="token string">&quot;black&quot;</span><span class="token punctuation">,</span> back_color<span class="token operator">=</span><span class="token string">&quot;white&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">&quot;RGB&quot;</span><span class="token punctuation">)</span>
qrcode_image
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28),d=t(`<h2 id="第四步-生成艺术化二维码" tabindex="-1"><a class="header-anchor" href="#第四步-生成艺术化二维码" aria-hidden="true">#</a> 第四步：生成艺术化二维码</h2><p>下面的代码块定义了最重要的参数——提示词！<br> 如果您不熟悉 Stable Diffusion 的提示词书写技巧的话，可以仅修改<code>prompt</code>的第二行。附录中也收录了一些提示词教程的链接，您可以跳转阅读。</p><p>请注意，每次调整提示词后需要重新运行该代码块。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 提示词及负面提示词, 更详细的提示词能获得更好的结果</span>
prompt <span class="token operator">=</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;
(masterpiece:1.4, best quality:1.4), illustrations, (solo:1.2), (original), (very detailed wallpaper), photographic reality, (ultra detailed:1.4), (super complex details), 
flowers, cheery
&quot;&quot;&quot;</span>
negative_prompt <span class="token operator">=</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;
NG_DeepNegative_V1_75T, (worst quality, low quality:1.4), EasyNegative, (worst quality, low quality, extra digits:1.4), bad proportions, worst quality, low quality, normal quality,
NSFW, watermark
&quot;&quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以在下面的代码块调整各种参数来获得预想的生成效果。</p><p>请注意，每次调整参数后需要重新运行该代码块。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 随机数种子。固定随机数种子可以保证生成的结果可复现，也可以通过更改这个随机数种子来获得不同的生成结果。</span>
seed <span class="token operator">=</span> <span class="token number">1002</span>

<span class="token comment"># 推理步数。对于示例所选用的 Scheduler 来说 30 已经足够。</span>
num_inference_steps <span class="token operator">=</span> <span class="token number">30</span>

<span class="token comment"># 分类器指导强度。更高的值会让生成的图片更符合提示词，但代价是更低的图像质量。</span>
guidance_scale <span class="token operator">=</span> <span class="token number">7</span>

<span class="token comment"># ControlNet QRCode Monster 相关参数</span>
controlnet_conditioning_scale_qrcode <span class="token operator">=</span> <span class="token number">1.5</span>  <span class="token comment"># 指导强度。更高的值会让生成的图像更有二维码的特点。</span>
control_guidance_start_qrcode <span class="token operator">=</span> <span class="token number">0.1</span>  <span class="token comment"># 产生作用的起始点。取值范围从0到1，示例中的0.1代表推理步数进行10%后该 ControlNet 开始发挥作用。</span>
control_guidance_end_qrcode <span class="token operator">=</span> <span class="token number">0.9</span>     <span class="token comment"># 产生作用的结束点。取值范围从0到1，示例中的0.9代表推理步数进行90%后该 ControlNet 结束发挥作用。</span>

<span class="token comment"># ControlNet Brightness 相关参数</span>
controlnet_conditioning_scale_brightness <span class="token operator">=</span> <span class="token number">0.4</span> <span class="token comment"># 指导强度。更高的值会让生成的图像更有二维码的特点。</span>
control_guidance_start_brightness <span class="token operator">=</span> <span class="token number">0.65</span>  <span class="token comment"># 产生作用的起始点。取值范围从0到1，示例中的0.65代表推理步数进行65%后该 ControlNet 开始发挥作用。</span>
control_guidance_end_brightness <span class="token operator">=</span> <span class="token number">0.9</span>     <span class="token comment"># 产生作用的结束点。取值范围从0到1，示例中的0.9代表推理步数进行90%后该 ControlNet 结束发挥作用。</span>

<span class="token comment"># 生成图像的高度。建议的值为 512 或 768 以达到较好的效果。</span>
height <span class="token operator">=</span> <span class="token number">768</span>
<span class="token comment"># 生成图像的宽度。建议的值为 512 或 768 以达到较好的效果。</span>
width <span class="token operator">=</span> <span class="token number">768</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你希望得到<strong>更加艺术化</strong>的生成结果，你可以：</p><ul><li>适当<strong>调低</strong>两个 ControlNet 的<strong>指导强度</strong></li><li>适当<strong>调后</strong>两个 ControlNet 产生作用的<strong>起始点</strong></li><li>适当<strong>调前</strong>两个 ControlNet 产生作用的<strong>结束点</strong></li></ul><p>如果生成的二维码<strong>无法识别</strong>，你可以调整随机数种子多试几次，或者按照与上述调整方法相反的方式调整以使得生成的结果更加有二维码的特点。</p><p>将参数传入数据管道以开始推理。稍等大约半分钟，就可以获得结果。如果生成的结果不满足预期，建议调整上面的参数与提示词后重新运行，多尝试几次。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>image <span class="token operator">=</span> pipe<span class="token punctuation">(</span>
    prompt<span class="token punctuation">,</span>
    <span class="token punctuation">[</span>qrcode_image<span class="token punctuation">,</span> qrcode_image<span class="token punctuation">]</span><span class="token punctuation">,</span>
    num_inference_steps<span class="token operator">=</span>num_inference_steps<span class="token punctuation">,</span>
    generator<span class="token operator">=</span>torch<span class="token punctuation">.</span>Generator<span class="token punctuation">(</span><span class="token string">&quot;cuda&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>manual_seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span><span class="token punctuation">,</span>
    negative_prompt<span class="token operator">=</span>negative_prompt<span class="token punctuation">,</span>
    guidance_scale<span class="token operator">=</span>guidance_scale<span class="token punctuation">,</span>
    controlnet_conditioning_scale<span class="token operator">=</span><span class="token punctuation">[</span>
        controlnet_conditioning_scale_qrcode<span class="token punctuation">,</span>
        controlnet_conditioning_scale_brightness<span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    control_guidance_start<span class="token operator">=</span><span class="token punctuation">[</span>
        control_guidance_start_qrcode<span class="token punctuation">,</span>
        control_guidance_start_brightness<span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    control_guidance_end<span class="token operator">=</span><span class="token punctuation">[</span>control_guidance_end_qrcode<span class="token punctuation">,</span>
                          control_guidance_end_brightness<span class="token punctuation">]</span><span class="token punctuation">,</span>
    height<span class="token operator">=</span>height<span class="token punctuation">,</span>
    width<span class="token operator">=</span>width<span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">.</span>images<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
image
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>  0%|          | 0/30 [00:00&lt;?, ?it/s]
</code></pre>`,13),m=t(`<p>生成出满意的二维码之后，可以将其保存到 <em>/data</em> 目录中。保存之后，你可以打开侧边栏，点击左上角的刷新按钮，然后就能看到出现了 <em>qrcode.png</em>，右键即可将其下载到电脑中。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>image<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">&quot;qrcode.png&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="附录" tabindex="-1"><a class="header-anchor" href="#附录" aria-hidden="true">#</a> 附录</h2><p>如果您想了解提示词的具体格式和含义，您可以阅读下述文章：</p>`,4),v={href:"https://zhuanlan.zhihu.com/p/619247417",target:"_blank",rel:"noopener noreferrer"},k={href:"https://stable-diffusion-art.com/prompt-guide/",target:"_blank",rel:"noopener noreferrer"},b=n("p",null,"如果您想了解 Hugging Face AI 的更多用法，您可以阅读：",-1),g={href:"https://huggingface.co/docs",target:"_blank",rel:"noopener noreferrer"},h={href:"https://huggingface.co/docs/diffusers/using-diffusers/loading_overview",target:"_blank",rel:"noopener noreferrer"},_=n("p",null,"如果您想了解关于 Stable Diffusion 和 ControlNet 的更多信息，您可以参考：",-1),f={href:"https://github.com/Stability-AI/stablediffusion",target:"_blank",rel:"noopener noreferrer"},q={href:"https://github.com/lllyasviel/ControlNet",target:"_blank",rel:"noopener noreferrer"},y=n("h2",{id:"参考资料及项目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考资料及项目","aria-hidden":"true"},"#"),s(" 参考资料及项目")],-1),C={href:"https://huggingface.co/spaces/blanchon/qrcode-diffusion",target:"_blank",rel:"noopener noreferrer"},w={href:"https://stable-diffusion-art.com/qr-code/",target:"_blank",rel:"noopener noreferrer"},x={href:"https://antfu.me/posts/ai-qrcode",target:"_blank",rel:"noopener noreferrer"},N={href:"https://huggingface.co/DionTimmer/controlnet_qrcode",target:"_blank",rel:"noopener noreferrer"};function S(D,R){const a=p("ExternalLinkIcon");return l(),c("div",null,[u,o(" ![png](output_21_0.png) "),d,o(" ![png](output_29_1.png) "),m,n("ul",null,[n("li",null,[n("a",v,[s("知乎：【Stable Diffusion】Prompt 篇"),e(a)])]),n("li",null,[n("a",k,[s("Stable Diffusion prompt: a definitive guide"),e(a)])])]),b,n("ul",null,[n("li",null,[n("a",g,[s("Hugging Face Docs"),e(a)])]),n("li",null,[n("a",h,[s("diffusers docs"),e(a)])])]),_,n("ul",null,[n("li",null,[n("a",f,[s("Stable Diffusion 项目地址"),e(a)])]),n("li",null,[n("a",q,[s("ControlNet 项目地址"),e(a)])])]),y,n("ul",null,[n("li",null,[n("a",C,[s("https://huggingface.co/spaces/blanchon/qrcode-diffusion"),e(a)])]),n("li",null,[n("a",w,[s("https://stable-diffusion-art.com/qr-code/"),e(a)])]),n("li",null,[n("a",x,[s("https://antfu.me/posts/ai-qrcode"),e(a)])]),n("li",null,[n("a",N,[s("https://huggingface.co/DionTimmer/controlnet_qrcode"),e(a)])])])])}const M=i(r,[["render",S],["__file","qrcode-diffusion.html.vue"]]);export{M as default};
